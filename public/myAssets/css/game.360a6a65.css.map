{"version":3,"sources":["webpack:///src/components/D:/workspace/de.htwg.wt.TicTacToe4DAuth/frontend/tictactoe-vue/src/components/SideBar.vue","webpack:///src/components/src/components/GameContent.vue"],"names":[],"mappings":"AAuLA,SACE,oBAAA,CACA,cAAA,CACA,KAAA,CACA,UAAA,CACA,oBACE,iBAAA,CACA,oBAAA,CAEA,0BACE,cAAA,CAGF,iCACE,iBAAA,CACA,WAAA,CACA,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,iBAAA,CACA,aAAA,CACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,SAAA,CACA,iBAAA,CACA,SAAA,CACA,sBAAA,CAEA,uCACE,UAAA,CACA,iBAAA,CACA,OAAA,CACA,UAAA,CACA,eAAA,CACA,gBAAA,CACA,kBAAA,CACA,qDAAA,CAIJ,uCACE,kBAAA,CACA,SAAA,CC6TN,MAGA,QACA,CACA,aAJA,UAAA,CACA,WAYA,CATA,OAGA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,SAAA,CACA,OACA,CACA,QACA,iBACA","file":"game.360a6a65.css","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.sideBar {\r\n  width: 80px !important;\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 99;\r\n  .mytooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n\r\n    .tooltiptext {\r\n      visibility: hidden;\r\n      width: 120px;\r\n      background-color: #555;\r\n      color: #fff;\r\n      text-align: center;\r\n      border-radius: 6px;\r\n      padding: 5px 0;\r\n      position: absolute;\r\n      z-index: 1;\r\n      top: 2px;\r\n      left: 95px;\r\n      margin-left: -50px;\r\n      opacity: 0;\r\n      transition: opacity 0.3s;\r\n\r\n      &::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 100%;\r\n        margin-top: -5px;\r\n        border-width: 5px;\r\n        border-style: solid;\r\n        border-color: transparent #555 transparent transparent;\r\n      }\r\n    }\r\n\r\n    &:hover .tooltiptext {\r\n      visibility: visible;\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n","<template>\r\n  <div>\r\n    <div id=\"status\"></div>\r\n    <div id=\"game\" class=\"w-100 h-100\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport router from \"../router\";\r\nexport default {\r\n  mounted: function() {\r\n    this.$nextTick(function() {\r\n      !(function(Math) {\r\n        \"use strict\";\r\n\r\n        // ---- vec4 vector ----\r\n\r\n        function vec4(x, y, z) {\r\n          var vec = new Float32Array([x || 0, y || 0, z || 0]);\r\n          vec.transformMat4 = function(a, m) {\r\n            var x = a[0],\r\n              y = a[1],\r\n              z = a[2],\r\n              w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n            w = w || 1.0;\r\n            this[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n            this[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n            this[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n            return this;\r\n          };\r\n          Object.defineProperty(vec, \"x\", {\r\n            get: function() {\r\n              return this[0];\r\n            },\r\n            set: function(x) {\r\n              this[0] = x;\r\n            }\r\n          });\r\n          Object.defineProperty(vec, \"y\", {\r\n            get: function() {\r\n              return this[1];\r\n            },\r\n            set: function(y) {\r\n              this[1] = y;\r\n            }\r\n          });\r\n          Object.defineProperty(vec, \"z\", {\r\n            get: function() {\r\n              return this[2];\r\n            },\r\n            set: function(z) {\r\n              this[2] = z;\r\n            }\r\n          });\r\n          return vec;\r\n        }\r\n\r\n        // ---- mat4 matrice ----\r\n\r\n        function mat4() {\r\n          var mat = new Float32Array(16);\r\n          mat.identity = function() {\r\n            this[0] = 1;\r\n            this[1] = 0;\r\n            this[2] = 0;\r\n            this[3] = 0;\r\n            this[4] = 0;\r\n            this[5] = 1;\r\n            this[6] = 0;\r\n            this[7] = 0;\r\n            this[8] = 0;\r\n            this[9] = 0;\r\n            this[10] = 1;\r\n            this[11] = 0;\r\n            this[12] = 0;\r\n            this[13] = 0;\r\n            this[14] = 0;\r\n            this[15] = 1;\r\n            return this;\r\n          };\r\n          mat.rotateX = function(angle) {\r\n            var s = Math.sin(angle),\r\n              c = Math.cos(angle),\r\n              a10 = this[4],\r\n              a11 = this[5],\r\n              a12 = this[6],\r\n              a13 = this[7],\r\n              a20 = this[8],\r\n              a21 = this[9],\r\n              a22 = this[10],\r\n              a23 = this[11];\r\n            this[4] = a10 * c + a20 * s;\r\n            this[5] = a11 * c + a21 * s;\r\n            this[6] = a12 * c + a22 * s;\r\n            this[7] = a13 * c + a23 * s;\r\n            this[8] = a20 * c - a10 * s;\r\n            this[9] = a21 * c - a11 * s;\r\n            this[10] = a22 * c - a12 * s;\r\n            this[11] = a23 * c - a13 * s;\r\n            return this;\r\n          };\r\n          mat.rotateY = function(angle) {\r\n            var s = Math.sin(angle),\r\n              c = Math.cos(angle),\r\n              a00 = this[0],\r\n              a01 = this[1],\r\n              a02 = this[2],\r\n              a03 = this[3],\r\n              a20 = this[8],\r\n              a21 = this[9],\r\n              a22 = this[10],\r\n              a23 = this[11];\r\n            this[0] = a00 * c - a20 * s;\r\n            this[1] = a01 * c - a21 * s;\r\n            this[2] = a02 * c - a22 * s;\r\n            this[3] = a03 * c - a23 * s;\r\n            this[8] = a00 * s + a20 * c;\r\n            this[9] = a01 * s + a21 * c;\r\n            this[10] = a02 * s + a22 * c;\r\n            this[11] = a03 * s + a23 * c;\r\n            return this;\r\n          };\r\n          mat.multiply = function(a, b) {\r\n            var a00 = a[0],\r\n              a01 = a[1],\r\n              a02 = a[2],\r\n              a03 = a[3],\r\n              a10 = a[4],\r\n              a11 = a[5],\r\n              a12 = a[6],\r\n              a13 = a[7],\r\n              a20 = a[8],\r\n              a21 = a[9],\r\n              a22 = a[10],\r\n              a23 = a[11],\r\n              a30 = a[12],\r\n              a31 = a[13],\r\n              a32 = a[14],\r\n              a33 = a[15];\r\n            var b0 = b[0],\r\n              b1 = b[1],\r\n              b2 = b[2],\r\n              b3 = b[3];\r\n            this[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n            this[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n            this[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n            this[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n            b0 = b[4];\r\n            b1 = b[5];\r\n            b2 = b[6];\r\n            b3 = b[7];\r\n            this[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n            this[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n            this[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n            this[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n            b0 = b[8];\r\n            b1 = b[9];\r\n            b2 = b[10];\r\n            b3 = b[11];\r\n            this[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n            this[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n            this[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n            this[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n            b0 = b[12];\r\n            b1 = b[13];\r\n            b2 = b[14];\r\n            b3 = b[15];\r\n            this[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n            this[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n            this[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n            this[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n            return this;\r\n          };\r\n          return mat;\r\n        }\r\n\r\n        var machine = 1,\r\n          human = 2,\r\n          nul = 0,\r\n          end = nul;\r\n\r\n        // ---- save winning values ----\r\n\r\n        function updateEnd(camp) {\r\n          for (var i = 0; i < cij[camp]; i++) {\r\n            var mem = memdiag[camp][i];\r\n            value[inv[mem]]++;\r\n            var mem1 = sym[inv[mem]];\r\n            if (mem1) value[mem1]++;\r\n            value[mem]--;\r\n            var mem2 = sym[mem];\r\n            if (mem2) value[mem2]--;\r\n          }\r\n        }\r\n\r\n        // ---- reinit ----\r\n\r\n        function reinit() {\r\n          for (var p = 0; p < 27; p++) {\r\n            spheres[p].s = 0;\r\n          }\r\n          end = 0;\r\n        }\r\n\r\n        // ---- the end ----\r\n\r\n        function manageEnd() {\r\n          if (end === nul) message = \"the game ended in a draw...\";\r\n          if (end === machine) message = \"You lost\";\r\n          if (end === human) message = \"You win\";\r\n          spheres.forEach(function(sphere) {\r\n            if (sphere.s == end) {\r\n              sphere.s = 4;\r\n            }\r\n          });\r\n          setTimedOut(function() {\r\n            this.showFinishModal(message);\r\n          }, 5000);\r\n        }\r\n\r\n        function showFinishModal(message) {\r\n          if (framework == 0) {\r\n            // $('.gameFinishedModal').html(message);\r\n            // $('#gameFinishModal').modal({backdrop: 'static', keyboard: false});\r\n          }\r\n        }\r\n        // ---- write ----\r\n\r\n        function writeMessage() {\r\n          ctx.font = \"30px Codystar\";\r\n          ctx.fillStyle = \"#fff\";\r\n          ctx.textAlign = \"center\";\r\n          ctx.fillText(message, canvas.width / 2, canvas.height / 8);\r\n        }\r\n\r\n        // ---- 3D spheres ----\r\n\r\n        var spheres = [],\r\n          over,\r\n          dx = 0,\r\n          dy = 0,\r\n          message = \"\";\r\n        var fillColor = [\"\", \"#0f0\", \"#f00\", \"#fff\"];\r\n\r\n        function run() {\r\n          requestAnimationFrame(run);\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          if (pointer.isDown) {\r\n            dx -= (pointer.x - pointer.xb) * 0.001;\r\n            dy += (pointer.y - pointer.yb) * 0.001;\r\n          }\r\n          dx *= 0.9;\r\n          dy *= 0.9;\r\n          camera.update(dy, dx);\r\n          spheres.forEach(function(sphere) {\r\n            sphere.project();\r\n          });\r\n          spheres.sort(function(p0, p1) {\r\n            return p1.zIndex - p0.zIndex;\r\n          });\r\n          spheres.forEach(function(sphere) {\r\n            sphere.draw();\r\n          });\r\n          if (message) writeMessage();\r\n          pointer.xb = pointer.x;\r\n          pointer.yb = pointer.y;\r\n        }\r\n\r\n        // ---- camera ----\r\n\r\n        var camera = {\r\n          mvMatrix: mat4().identity(),\r\n          currentRotationMatrix: mat4().identity(),\r\n          newRotationMatrix: mat4().identity(),\r\n          update: function(deltaX, deltaY) {\r\n            this.newRotationMatrix\r\n              .identity()\r\n              .rotateX(deltaX)\r\n              .rotateY(deltaY);\r\n            this.currentRotationMatrix.multiply(\r\n              this.newRotationMatrix,\r\n              this.currentRotationMatrix\r\n            );\r\n            this.mvMatrix\r\n              .identity()\r\n              .multiply(this.mvMatrix, this.currentRotationMatrix);\r\n          }\r\n        };\r\n\r\n        // ---- sphere constructor ----\r\n\r\n        var Sphere = function(id, x, y, z, w) {\r\n          var s = canvas.width / 6;\r\n          this.id = id;\r\n          this.width = w;\r\n          this.coord = vec4((x - 1) * s, (y - 1) * s, (z - 1) * s);\r\n          this.p2d = vec4();\r\n          this.x = 0;\r\n          this.y = 0;\r\n          this.w = 0;\r\n          this.s = 0;\r\n          this.zIndex = 0;\r\n        };\r\n\r\n        // ---- project sphere ----\r\n\r\n        Sphere.prototype.project = function() {\r\n          this.p2d.transformMat4(this.coord, camera.mvMatrix);\r\n          this.zIndex = this.p2d.z;\r\n          var p = 400 / (800 + this.p2d.z);\r\n          this.x = canvas.width * 0.5 + this.p2d.x * p;\r\n          this.y = canvas.height * 0.5 + this.p2d.y * p;\r\n          this.w = (p * this.width * 4) / 5;\r\n        };\r\n\r\n        // ---- draw sphere ----\r\n\r\n        Sphere.prototype.draw = function() {\r\n          if (end && !this.s) return;\r\n          ctx.beginPath();\r\n          console.log(this.x, this.y, this.w, 0, 2 * Math.PI)\r\n          ctx.arc(this.x, this.y, this.w, 0, 2 * Math.PI);\r\n          ctx.fillStyle = \"lightgrey\";\r\n          ctx.fillStyle = fillColor[this.s];\r\n          ctx.strokeStyle = \"#000\";\r\n          ctx.fill();\r\n          ctx.stroke();\r\n        };\r\n\r\n        // ---- set canvas ----\r\n\r\n        var canvas = {\r\n          width: 0,\r\n          height: 0,\r\n          rx: 1,\r\n          ry: 1,\r\n          elem: document.createElement(\"canvas\"),\r\n          resize: function() {\r\n            var o = this.elem;\r\n            this.offsetWidth = this.elem.offsetWidth;\r\n            this.offsetHeight = this.elem.offsetHeight;\r\n            if (this.width) {\r\n              this.rx = this.width / this.offsetWidth;\r\n              this.ry = this.height / this.offsetHeight;\r\n            }\r\n            for (this.left = 0, this.top = 0; o != null; o = o.offsetParent) {\r\n              this.left += o.offsetLeft;\r\n              this.top += o.offsetTop;\r\n            }\r\n          },\r\n          init: function() {\r\n            var ctx = this.elem.getContext(\"2d\");\r\n            document.getElementById(\"game\").append(this.elem);\r\n            this.resize();\r\n            this.width = this.elem.width = this.offsetWidth;\r\n            this.height = this.elem.height = this.offsetHeight;\r\n            window.addEventListener(\r\n              \"resize\",\r\n              canvas.resize.bind(canvas),\r\n              false\r\n            );\r\n            return ctx;\r\n          }\r\n        };\r\n        var ctx = canvas.init();\r\n        var webSocket;\r\n        // ---- set pointer ----\r\n\r\n        var pointer = (function(canvas) {\r\n          var pointer = {\r\n            x: 0,\r\n            y: 0,\r\n            canvas: canvas,\r\n            touchMode: false,\r\n            isDown: false,\r\n            draging: false,\r\n            xb: 0,\r\n            yb: 0\r\n          };\r\n          [\r\n            [\r\n              window,\r\n              \"mousemove,touchmove\",\r\n              function(e) {\r\n                this.touchMode = e.targetTouches;\r\n                if (this.touchMode) e.preventDefault();\r\n                var pointer = this.touchMode ? this.touchMode[0] : e;\r\n                this.x = (pointer.clientX - this.canvas.left) * this.canvas.rx;\r\n                this.y = (pointer.clientY - this.canvas.top) * this.canvas.ry;\r\n                if (this.isDown) this.draging = true;\r\n              }\r\n            ],\r\n            [\r\n              canvas.elem,\r\n              \"mousedown,touchstart\",\r\n              function(e) {\r\n                this.touchMode = e.targetTouches;\r\n                if (this.touchMode) e.preventDefault();\r\n                var pointer = this.touchMode ? this.touchMode[0] : e;\r\n                this.xb = this.x =\r\n                  (pointer.clientX - this.canvas.left) * this.canvas.rx;\r\n                this.yb = this.y =\r\n                  (pointer.clientY - this.canvas.top) * this.canvas.ry;\r\n                this.isDown = true;\r\n                setTimeout(\r\n                  function() {\r\n                    if (\r\n                      !this.isDown &&\r\n                      Math.abs(this.xb - this.x) < 11 &&\r\n                      Math.abs(this.yb - this.y) < 11\r\n                    ) {\r\n                      this.click(e);\r\n                    }\r\n                  }.bind(this),\r\n                  200\r\n                );\r\n              }\r\n            ],\r\n            [\r\n              window,\r\n              \"mouseup,touchend,touchcancel\",\r\n              function(e) {\r\n                e.preventDefault();\r\n                this.isDown = false;\r\n                this.draging = false;\r\n              }\r\n            ]\r\n          ].forEach(\r\n            function(e) {\r\n              for (\r\n                var i = 0, events = e[1].split(\",\");\r\n                i < events.length;\r\n                i++\r\n              ) {\r\n                e[0].addEventListener(events[i], e[2].bind(pointer), false);\r\n              }\r\n            }.bind(pointer)\r\n          );\r\n          return pointer;\r\n        })(canvas);\r\n\r\n        // ---- init spheres ----\r\n\r\n        for (var z = 0; z < 4; z++) {\r\n          for (var y = 0; y < 4; y++) {\r\n            for (var x = 0; x < 4; x++) {\r\n              var k = z + \"-\" + y + \"-\" + x;\r\n              spheres.push(new Sphere(k, x, y, z, canvas.width / 11));\r\n            }\r\n          }\r\n        }\r\n\r\n        // ---- find sphere ----\r\n\r\n        function fSphere(id) {\r\n          var m = spheres.find(function(s) {\r\n            return s.id === id;\r\n          });\r\n          return m;\r\n        }\r\n\r\n        connectWebSocket(1);\r\n\r\n        fetch(\"/json\")\r\n          .then(response => response.json())\r\n          .then(data => updateView(data));\r\n\r\n        function updateView(result) {\r\n          const { statusMessage, gridArray } = result;\r\n          document.getElementById(\"status\").innerHTML = statusMessage;\r\n          if (statusMessage.includes(\"congratulation\")) {\r\n            router.push({ name: \"GameOver\" });\r\n          }\r\n          for (let grid = 0; grid < gridArray.length; grid++) {\r\n            for (let i = 0; i < gridArray[grid].length; i++) {\r\n              for (let j = 0; j < gridArray[grid][i].length; j++) {\r\n                if (gridArray[grid][i][j] !== \"-\") {\r\n                  fSphere(grid + \"-\" + i + \"-\" + j).s =\r\n                    gridArray[grid][i][j] === \"X\" ? human : machine;\r\n                } else {\r\n                  fSphere(grid + \"-\" + i + \"-\" + j).s = 0;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function connectWebSocket(s) {\r\n          console.log(s);\r\n          webSocket = new WebSocket(\"ws://localhost:9000/websocket\");\r\n          console.info(\"Connecting to WebSocket...\");\r\n\r\n          webSocket.onopen = () => {\r\n            console.info(\"Connected to server: \" + webSocket.url);\r\n          };\r\n          webSocket.onmessage = message => {\r\n            const result = JSON.parse(message.data);\r\n            updateView(result);\r\n          };\r\n          webSocket.onerror = event => console.error(event);\r\n          webSocket.onclose = () => setTimeout(connectWebSocket, 2000);\r\n        }\r\n\r\n        var played = false;\r\n        pointer.click = function() {\r\n          // if (played) {\r\n          //     showTempMessage(\"Warte bis der andere Player spielt\");\r\n          // } else {\r\n          if (end) {\r\n            reinit();\r\n          }\r\n          message = \"\";\r\n          var over = null;\r\n          spheres.forEach(function(sphere) {\r\n            var dx = pointer.x - sphere.x,\r\n              dy = pointer.y - sphere.y;\r\n            if (Math.sqrt(dx * dx + dy * dy) < sphere.w) over = sphere;\r\n          });\r\n          if (over) {\r\n            const vari = over.id.split(\"-\");\r\n            over.s = played ? human : machine;\r\n            played = !played;\r\n            webSocket.send(\r\n              JSON.stringify({\r\n                col: parseInt(vari[2]),\r\n                row: parseInt(vari[1]),\r\n                grid: parseInt(vari[0])\r\n              })\r\n            );\r\n          }\r\n          if (over && over.s === 0) {\r\n            over.s = human;\r\n          }\r\n          // }\r\n        };\r\n        run();\r\n      })(Math);\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#game {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n}\r\ncanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 80px;\r\n  right: 0;\r\n}\r\n#status {\r\n  padding-left: 80px;\r\n}\r\n</style>\r\n"]}