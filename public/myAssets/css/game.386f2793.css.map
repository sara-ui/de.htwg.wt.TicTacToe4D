{"version":3,"sources":["webpack:///src/components/SideBar.vue","webpack:///src/components/src/components/GameContent.vue"],"names":[],"mappings":"AAwLA,SACE,oBAAA,CACA,cAAA,CACA,KAAA,CACA,UAAA,CACA,oBACE,iBAAA,CACA,oBAAA,CAEA,0BACE,cAAA,CAGF,iCACE,iBAAA,CACA,WAAA,CACA,qBAAA,CACA,UAAA,CACA,iBAAA,CACA,iBAAA,CACA,aAAA,CACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,SAAA,CACA,iBAAA,CACA,SAAA,CACA,sBAAA,CAEA,uCACE,UAAA,CACA,iBAAA,CACA,OAAA,CACA,UAAA,CACA,eAAA,CACA,gBAAA,CACA,kBAAA,CACA,qDAAA,CAIJ,uCACE,kBAAA,CACA,SAAA,CC4TN,MAGA,QACA,CACA,aAJA,UAAA,CACA,WAYA,CATA,OAGA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,SAAA,CACA,OACA,CACA,QACA,iBACA","file":"game.386f2793.css","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.sideBar {\n  width: 80px !important;\n  position: fixed;\n  top: 0;\n  z-index: 99;\n  .mytooltip {\n    position: relative;\n    display: inline-block;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    .tooltiptext {\n      visibility: hidden;\n      width: 120px;\n      background-color: #555;\n      color: #fff;\n      text-align: center;\n      border-radius: 6px;\n      padding: 5px 0;\n      position: absolute;\n      z-index: 1;\n      top: 2px;\n      left: 95px;\n      margin-left: -50px;\n      opacity: 0;\n      transition: opacity 0.3s;\n\n      &::after {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        right: 100%;\n        margin-top: -5px;\n        border-width: 5px;\n        border-style: solid;\n        border-color: transparent #555 transparent transparent;\n      }\n    }\n\n    &:hover .tooltiptext {\n      visibility: visible;\n      opacity: 1;\n    }\n  }\n}\n","<template>\n  <div>\n    <div class=\"test\">\n      <div id=\"status\" class=\"alert alert-info\" role=\"alert\"></div>\n    </div>\n    <div id=\"game\" class=\"w-100 h-100\"></div>\n  </div>\n</template>\n\n<script>\nimport router from \"../router\";\nexport default {\n  mounted: function() {\n    this.$nextTick(function() {\n      !(function(Math) {\n        \"use strict\";\n\n        // ---- vec4 vector ----\n\n        function vec4(x, y, z) {\n          var vec = new Float32Array([x || 0, y || 0, z || 0]);\n          vec.transformMat4 = function(a, m) {\n            var x = a[0],\n              y = a[1],\n              z = a[2],\n              w = m[3] * x + m[7] * y + m[11] * z + m[15];\n            w = w || 1.0;\n            this[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n            this[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n            this[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n            return this;\n          };\n          Object.defineProperty(vec, \"x\", {\n            get: function() {\n              return this[0];\n            },\n            set: function(x) {\n              this[0] = x;\n            }\n          });\n          Object.defineProperty(vec, \"y\", {\n            get: function() {\n              return this[1];\n            },\n            set: function(y) {\n              this[1] = y;\n            }\n          });\n          Object.defineProperty(vec, \"z\", {\n            get: function() {\n              return this[2];\n            },\n            set: function(z) {\n              this[2] = z;\n            }\n          });\n          return vec;\n        }\n\n        // ---- mat4 matrice ----\n\n        function mat4() {\n          var mat = new Float32Array(16);\n          mat.identity = function() {\n            this[0] = 1;\n            this[1] = 0;\n            this[2] = 0;\n            this[3] = 0;\n            this[4] = 0;\n            this[5] = 1;\n            this[6] = 0;\n            this[7] = 0;\n            this[8] = 0;\n            this[9] = 0;\n            this[10] = 1;\n            this[11] = 0;\n            this[12] = 0;\n            this[13] = 0;\n            this[14] = 0;\n            this[15] = 1;\n            return this;\n          };\n          mat.rotateX = function(angle) {\n            var s = Math.sin(angle),\n              c = Math.cos(angle),\n              a10 = this[4],\n              a11 = this[5],\n              a12 = this[6],\n              a13 = this[7],\n              a20 = this[8],\n              a21 = this[9],\n              a22 = this[10],\n              a23 = this[11];\n            this[4] = a10 * c + a20 * s;\n            this[5] = a11 * c + a21 * s;\n            this[6] = a12 * c + a22 * s;\n            this[7] = a13 * c + a23 * s;\n            this[8] = a20 * c - a10 * s;\n            this[9] = a21 * c - a11 * s;\n            this[10] = a22 * c - a12 * s;\n            this[11] = a23 * c - a13 * s;\n            return this;\n          };\n          mat.rotateY = function(angle) {\n            var s = Math.sin(angle),\n              c = Math.cos(angle),\n              a00 = this[0],\n              a01 = this[1],\n              a02 = this[2],\n              a03 = this[3],\n              a20 = this[8],\n              a21 = this[9],\n              a22 = this[10],\n              a23 = this[11];\n            this[0] = a00 * c - a20 * s;\n            this[1] = a01 * c - a21 * s;\n            this[2] = a02 * c - a22 * s;\n            this[3] = a03 * c - a23 * s;\n            this[8] = a00 * s + a20 * c;\n            this[9] = a01 * s + a21 * c;\n            this[10] = a02 * s + a22 * c;\n            this[11] = a03 * s + a23 * c;\n            return this;\n          };\n          mat.multiply = function(a, b) {\n            var a00 = a[0],\n              a01 = a[1],\n              a02 = a[2],\n              a03 = a[3],\n              a10 = a[4],\n              a11 = a[5],\n              a12 = a[6],\n              a13 = a[7],\n              a20 = a[8],\n              a21 = a[9],\n              a22 = a[10],\n              a23 = a[11],\n              a30 = a[12],\n              a31 = a[13],\n              a32 = a[14],\n              a33 = a[15];\n            var b0 = b[0],\n              b1 = b[1],\n              b2 = b[2],\n              b3 = b[3];\n            this[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n            this[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n            this[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n            this[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n            b0 = b[4];\n            b1 = b[5];\n            b2 = b[6];\n            b3 = b[7];\n            this[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n            this[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n            this[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n            this[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n            b0 = b[8];\n            b1 = b[9];\n            b2 = b[10];\n            b3 = b[11];\n            this[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n            this[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n            this[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n            this[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n            b0 = b[12];\n            b1 = b[13];\n            b2 = b[14];\n            b3 = b[15];\n            this[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n            this[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n            this[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n            this[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n            return this;\n          };\n          return mat;\n        }\n\n        var machine = 1,\n          human = 2,\n          nul = 0,\n          end = nul;\n\n        // ---- save winning values ----\n\n        function updateEnd(camp) {\n          for (var i = 0; i < cij[camp]; i++) {\n            var mem = memdiag[camp][i];\n            value[inv[mem]]++;\n            var mem1 = sym[inv[mem]];\n            if (mem1) value[mem1]++;\n            value[mem]--;\n            var mem2 = sym[mem];\n            if (mem2) value[mem2]--;\n          }\n        }\n\n        // ---- reinit ----\n\n        function reinit() {\n          for (var p = 0; p < 27; p++) {\n            spheres[p].s = 0;\n          }\n          end = 0;\n        }\n\n        // ---- the end ----\n\n        function manageEnd() {\n          if (end === nul) message = \"the game ended in a draw...\";\n          if (end === machine) message = \"You lost\";\n          if (end === human) message = \"You win\";\n          spheres.forEach(function(sphere) {\n            if (sphere.s == end) {\n              sphere.s = 4;\n            }\n          });\n          setTimedOut(function() {\n            this.showFinishModal(message);\n          }, 5000);\n        }\n\n        function showFinishModal(message) {\n          if (framework == 0) {\n            // $('.gameFinishedModal').html(message);\n            // $('#gameFinishModal').modal({backdrop: 'static', keyboard: false});\n          }\n        }\n        // ---- write ----\n\n        function writeMessage() {\n          ctx.font = \"30px Codystar\";\n          ctx.fillStyle = \"#fff\";\n          ctx.textAlign = \"center\";\n          ctx.fillText(message, canvas.width / 2, canvas.height / 8);\n        }\n\n        // ---- 3D spheres ----\n\n        var spheres = [],\n          over,\n          dx = 0,\n          dy = 0,\n          message = \"\";\n        var fillColor = [\"\", \"#0f0\", \"#f00\", \"#fff\"];\n\n        function run() {\n          requestAnimationFrame(run);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          if (pointer.isDown) {\n            dx -= (pointer.x - pointer.xb) * 0.001;\n            dy += (pointer.y - pointer.yb) * 0.001;\n          }\n          dx *= 0.9;\n          dy *= 0.9;\n          camera.update(dy, dx);\n          spheres.forEach(function(sphere) {\n            sphere.project();\n          });\n          spheres.sort(function(p0, p1) {\n            return p1.zIndex - p0.zIndex;\n          });\n          spheres.forEach(function(sphere) {\n            sphere.draw();\n          });\n          if (message) writeMessage();\n          pointer.xb = pointer.x;\n          pointer.yb = pointer.y;\n        }\n\n        // ---- camera ----\n\n        var camera = {\n          mvMatrix: mat4().identity(),\n          currentRotationMatrix: mat4().identity(),\n          newRotationMatrix: mat4().identity(),\n          update: function(deltaX, deltaY) {\n            this.newRotationMatrix\n              .identity()\n              .rotateX(deltaX)\n              .rotateY(deltaY);\n            this.currentRotationMatrix.multiply(\n              this.newRotationMatrix,\n              this.currentRotationMatrix\n            );\n            this.mvMatrix\n              .identity()\n              .multiply(this.mvMatrix, this.currentRotationMatrix);\n          }\n        };\n\n        // ---- sphere constructor ----\n\n        var Sphere = function(id, x, y, z, w) {\n          var s = canvas.width / 6;\n          this.id = id;\n          this.width = w;\n          this.coord = vec4((x - 1) * s, (y - 1) * s, (z - 1) * s);\n          this.p2d = vec4();\n          this.x = 0;\n          this.y = 0;\n          this.w = 0;\n          this.s = 0;\n          this.zIndex = 0;\n        };\n\n        // ---- project sphere ----\n\n        Sphere.prototype.project = function() {\n          this.p2d.transformMat4(this.coord, camera.mvMatrix);\n          this.zIndex = this.p2d.z;\n          var p = 400 / (800 + this.p2d.z);\n          this.x = canvas.width * 0.5 + this.p2d.x * p;\n          this.y = canvas.height * 0.5 + this.p2d.y * p;\n          this.w = (p * this.width * 4) / 5;\n        };\n\n        // ---- draw sphere ----\n\n        Sphere.prototype.draw = function() {\n          if (end && !this.s) return;\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.w, 0, 2 * Math.PI);\n          ctx.fillStyle = \"lightgrey\";\n          ctx.fillStyle = fillColor[this.s];\n          ctx.strokeStyle = \"#000\";\n          ctx.fill();\n          ctx.stroke();\n        };\n\n        // ---- set canvas ----\n\n        var canvas = {\n          width: 0,\n          height: 0,\n          rx: 1,\n          ry: 1,\n          elem: document.createElement(\"canvas\"),\n          resize: function() {\n            var o = this.elem;\n            this.offsetWidth = this.elem.offsetWidth;\n            this.offsetHeight = this.elem.offsetHeight;\n            if (this.width) {\n              this.rx = this.width / this.offsetWidth;\n              this.ry = this.height / this.offsetHeight;\n            }\n            for (this.left = 0, this.top = 0; o != null; o = o.offsetParent) {\n              this.left += o.offsetLeft;\n              this.top += o.offsetTop;\n            }\n          },\n          init: function() {\n            var ctx = this.elem.getContext(\"2d\");\n            document.getElementById(\"game\").append(this.elem);\n            this.resize();\n            this.width = this.elem.width = this.offsetWidth - 80;\n            this.height = this.elem.height = this.offsetHeight;\n            window.addEventListener(\n              \"resize\",\n              canvas.resize.bind(canvas),\n              false\n            );\n            return ctx;\n          }\n        };\n        var ctx = canvas.init();\n        var webSocket;\n        // ---- set pointer ----\n\n        var pointer = (function(canvas) {\n          var pointer = {\n            x: 0,\n            y: 0,\n            canvas: canvas,\n            touchMode: false,\n            isDown: false,\n            draging: false,\n            xb: 0,\n            yb: 0\n          };\n          [\n            [\n              window,\n              \"mousemove,touchmove\",\n              function(e) {\n                this.touchMode = e.targetTouches;\n                if (this.touchMode) e.preventDefault();\n                var pointer = this.touchMode ? this.touchMode[0] : e;\n                this.x = (pointer.clientX - this.canvas.left) * this.canvas.rx;\n                this.y = (pointer.clientY - this.canvas.top) * this.canvas.ry;\n                if (this.isDown) this.draging = true;\n              }\n            ],\n            [\n              canvas.elem,\n              \"mousedown,touchstart\",\n              function(e) {\n                this.touchMode = e.targetTouches;\n                if (this.touchMode) e.preventDefault();\n                var pointer = this.touchMode ? this.touchMode[0] : e;\n                this.xb = this.x =\n                  (pointer.clientX - this.canvas.left) * this.canvas.rx;\n                this.yb = this.y =\n                  (pointer.clientY - this.canvas.top) * this.canvas.ry;\n                this.isDown = true;\n                setTimeout(\n                  function() {\n                    if (\n                      !this.isDown &&\n                      Math.abs(this.xb - this.x) < 11 &&\n                      Math.abs(this.yb - this.y) < 11\n                    ) {\n                      this.click(e);\n                    }\n                  }.bind(this),\n                  200\n                );\n              }\n            ],\n            [\n              window,\n              \"mouseup,touchend,touchcancel\",\n              function(e) {\n                e.preventDefault();\n                this.isDown = false;\n                this.draging = false;\n              }\n            ]\n          ].forEach(\n            function(e) {\n              for (\n                var i = 0, events = e[1].split(\",\");\n                i < events.length;\n                i++\n              ) {\n                e[0].addEventListener(events[i], e[2].bind(pointer), false);\n              }\n            }.bind(pointer)\n          );\n          return pointer;\n        })(canvas);\n\n        // ---- init spheres ----\n\n        for (var z = 0; z < 4; z++) {\n          for (var y = 0; y < 4; y++) {\n            for (var x = 0; x < 4; x++) {\n              var k = z + \"-\" + y + \"-\" + x;\n              spheres.push(new Sphere(k, x, y, z, canvas.width / 11));\n            }\n          }\n        }\n\n        // ---- find sphere ----\n\n        function fSphere(id) {\n          var m = spheres.find(function(s) {\n            return s.id === id;\n          });\n          return m;\n        }\n\n        connectWebSocket(1);\n\n        fetch(\"/json\")\n          .then(response => response.json())\n          .then(data => updateView(data));\n\n        function updateView(result) {\n          const { statusMessage, gridArray } = result;\n          document.getElementById(\"status\").innerHTML = statusMessage;\n          if (statusMessage.includes(\"congratulation\")) {\n            router.push({ name: \"GameOver\" });\n          }\n          for (let grid = 0; grid < gridArray.length; grid++) {\n            for (let i = 0; i < gridArray[grid].length; i++) {\n              for (let j = 0; j < gridArray[grid][i].length; j++) {\n                if (gridArray[grid][i][j] !== \"-\") {\n                  fSphere(grid + \"-\" + i + \"-\" + j).s =\n                    gridArray[grid][i][j] === \"X\" ? human : machine;\n                } else {\n                  fSphere(grid + \"-\" + i + \"-\" + j).s = 0;\n                }\n              }\n            }\n          }\n        }\n\n        function connectWebSocket(s) {\n          webSocket = new WebSocket(\"ws://localhost:9000/websocket\");\n          console.info(\"Connecting to WebSocket...\");\n\n          webSocket.onopen = () => {\n            console.info(\"Connected to server: \" + webSocket.url);\n          };\n          webSocket.onmessage = message => {\n            const result = JSON.parse(message.data);\n            updateView(result);\n          };\n          webSocket.onerror = event => console.error(event);\n          webSocket.onclose = () => setTimeout(connectWebSocket, 2000);\n        }\n\n        var played = false;\n        pointer.click = function() {\n          // if (played) {\n          //     showTempMessage(\"Warte bis der andere Player spielt\");\n          // } else {\n          if (end) {\n            reinit();\n          }\n          message = \"\";\n          var over = null;\n          spheres.forEach(function(sphere) {\n            var dx = pointer.x - sphere.x,\n              dy = pointer.y - sphere.y;\n            if (Math.sqrt(dx * dx + dy * dy) < sphere.w) over = sphere;\n          });\n          if (over) {\n            const vari = over.id.split(\"-\");\n            over.s = played ? human : machine;\n            played = !played;\n            webSocket.send(\n              JSON.stringify({\n                col: parseInt(vari[2]),\n                row: parseInt(vari[1]),\n                grid: parseInt(vari[0])\n              })\n            );\n          }\n          if (over && over.s === 0) {\n            over.s = human;\n          }\n          // }\n        };\n        run();\n      })(Math);\n    });\n  }\n};\n</script>\n\n<style>\n#game {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n}\ncanvas {\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 80px;\n  right: 0;\n}\n#status {\n  padding-left: 80px;\n}\n</style>\n"]}